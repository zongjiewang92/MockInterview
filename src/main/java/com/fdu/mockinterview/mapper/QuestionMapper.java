package com.fdu.mockinterview.mapper;

import com.fdu.mockinterview.entity.Interview;
import com.fdu.mockinterview.entity.Question;
import java.util.List;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

public interface QuestionMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbg.generated Sat Jun 08 14:06:10 PDT 2024
     */
    @Delete({
        "delete from question",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbg.generated Sat Jun 08 14:06:10 PDT 2024
     */
    @Insert({
        "insert into question ( interview_id, ",
        "number, description, ",
        "answer_name, answer_directory, ",
        "answer_context, question_ai_score, ",
        "question_ai_result) ",
        "values ( #{interviewId,jdbcType=INTEGER}, ",
        "#{number,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR}, ",
        "#{answerName,jdbcType=VARCHAR}, #{answerDirectory,jdbcType=VARCHAR}, ",
        "#{answerContext,jdbcType=VARCHAR}, #{questionAiScore,jdbcType=VARCHAR}, ",
        "#{questionAiResult,jdbcType=VARCHAR}) "
    })
    @Options(useGeneratedKeys = true, keyProperty = "id")
    int insert(Question record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbg.generated Sat Jun 08 14:06:10 PDT 2024
     */
    @Select({
        "select",
        "id, interview_id, number, description, answer_name, answer_directory, answer_context, ",
        "question_ai_score, question_ai_result, create_date, update_date",
        "from question",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="interview_id", property="interviewId", jdbcType=JdbcType.INTEGER),
        @Result(column="number", property="number", jdbcType=JdbcType.INTEGER),
        @Result(column="description", property="description", jdbcType=JdbcType.VARCHAR),
        @Result(column="answer_name", property="answerName", jdbcType=JdbcType.VARCHAR),
        @Result(column="answer_directory", property="answerDirectory", jdbcType=JdbcType.VARCHAR),
        @Result(column="answer_context", property="answerContext", jdbcType=JdbcType.VARCHAR),
        @Result(column="question_ai_score", property="questionAiScore", jdbcType=JdbcType.VARCHAR),
        @Result(column="question_ai_result", property="questionAiResult", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_date", property="createDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_date", property="updateDate", jdbcType=JdbcType.VARCHAR)
    })
    Question selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbg.generated Sat Jun 08 14:06:10 PDT 2024
     */
    @Select({
        "select",
        "id, interview_id, number, description, answer_name, answer_directory, answer_context, ",
        "question_ai_score, question_ai_result, create_date, update_date",
        "from question"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="interview_id", property="interviewId", jdbcType=JdbcType.INTEGER),
        @Result(column="number", property="number", jdbcType=JdbcType.INTEGER),
        @Result(column="description", property="description", jdbcType=JdbcType.VARCHAR),
        @Result(column="answer_name", property="answerName", jdbcType=JdbcType.VARCHAR),
        @Result(column="answer_directory", property="answerDirectory", jdbcType=JdbcType.VARCHAR),
        @Result(column="answer_context", property="answerContext", jdbcType=JdbcType.VARCHAR),
        @Result(column="question_ai_score", property="questionAiScore", jdbcType=JdbcType.VARCHAR),
        @Result(column="question_ai_result", property="questionAiResult", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_date", property="createDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_date", property="updateDate", jdbcType=JdbcType.VARCHAR)
    })
    List<Question> selectAll();


    @Select({
            "select",
            "id, interview_id, number, description, answer_name, answer_directory, answer_context, ",
            "question_ai_score, question_ai_result, create_date, update_date",
            "from question",
            "where interview_id = #{interviewId,jdbcType=INTEGER}",
            "LIMIT #{offset}, #{pageSize}"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="interview_id", property="interviewId", jdbcType=JdbcType.INTEGER),
            @Result(column="number", property="number", jdbcType=JdbcType.INTEGER),
            @Result(column="description", property="description", jdbcType=JdbcType.VARCHAR),
            @Result(column="answer_name", property="answerName", jdbcType=JdbcType.VARCHAR),
            @Result(column="answer_directory", property="answerDirectory", jdbcType=JdbcType.VARCHAR),
            @Result(column="answer_context", property="answerContext", jdbcType=JdbcType.VARCHAR),
            @Result(column="question_ai_score", property="questionAiScore", jdbcType=JdbcType.VARCHAR),
            @Result(column="question_ai_result", property="questionAiResult", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_date", property="createDate", jdbcType=JdbcType.VARCHAR),
            @Result(column="update_date", property="updateDate", jdbcType=JdbcType.VARCHAR)
    })
    List<Question> selectQuestionByInterviewIdPages(@Param("offset") int offset, @Param("pageSize") int pageSize, Integer interviewId);

    @Select({
            "select",
            "COUNT(*) ",
            "from question",
            "where interview_id = #{interviewId,jdbcType=INTEGER}"
    })
    long countQuestionByUserId(int interviewId);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table question
     *
     * @mbg.generated Sat Jun 08 14:06:10 PDT 2024
     */
    @Update({
        "update question",
        "set interview_id = #{interviewId,jdbcType=INTEGER},",
          "number = #{number,jdbcType=INTEGER},",
          "description = #{description,jdbcType=VARCHAR},",
          "answer_name = #{answerName,jdbcType=VARCHAR},",
          "answer_directory = #{answerDirectory,jdbcType=VARCHAR},",
          "answer_context = #{answerContext,jdbcType=VARCHAR},",
          "question_ai_score = #{questionAiScore,jdbcType=VARCHAR},",
          "question_ai_result = #{questionAiResult,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Question record);


}