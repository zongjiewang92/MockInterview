package com.fdu.mockinterview.mapper;

import com.fdu.mockinterview.entity.Resume;
import java.util.List;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

public interface ResumeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table resume
     *
     * @mbg.generated Sat Jun 08 12:45:10 PDT 2024
     */
    @Delete({
        "delete from resume",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table resume
     *
     * @mbg.generated Sat Jun 08 12:45:10 PDT 2024
     */
    @Insert({
        "insert into resume (id, user_id, ",
        "cv_name, cv_type, ",
        "cv_directory, cv_context) ",
        "values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, ",
        "#{cvName,jdbcType=VARCHAR}, #{cvType,jdbcType=INTEGER}, ",
        "#{cvDirectory,jdbcType=VARCHAR}, #{cvContext,jdbcType=VARCHAR})",
    })
    int insert(Resume record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table resume
     *
     * @mbg.generated Sat Jun 08 12:45:10 PDT 2024
     */
    @Select({
        "select",
        "id, user_id, cv_name, cv_type, cv_directory, cv_context, create_date, update_date",
        "from resume",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
        @Result(column="cv_name", property="cvName", jdbcType=JdbcType.VARCHAR),
        @Result(column="cv_type", property="cvType", jdbcType=JdbcType.INTEGER),
        @Result(column="cv_directory", property="cvDirectory", jdbcType=JdbcType.VARCHAR),
        @Result(column="cv_context", property="cvContext", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_date", property="createDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_date", property="updateDate", jdbcType=JdbcType.VARCHAR)
    })
    Resume selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table resume
     *
     * @mbg.generated Sat Jun 08 12:45:10 PDT 2024
     */
    @Select({
        "select",
        "id, user_id, cv_name, cv_type, cv_directory, cv_context, create_date, update_date",
        "from resume"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
        @Result(column="cv_name", property="cvName", jdbcType=JdbcType.VARCHAR),
        @Result(column="cv_type", property="cvType", jdbcType=JdbcType.INTEGER),
        @Result(column="cv_directory", property="cvDirectory", jdbcType=JdbcType.VARCHAR),
        @Result(column="cv_context", property="cvContext", jdbcType=JdbcType.VARCHAR),
        @Result(column="create_date", property="createDate", jdbcType=JdbcType.VARCHAR),
        @Result(column="update_date", property="updateDate", jdbcType=JdbcType.VARCHAR)
    })
    List<Resume> selectAll();


    @Select({
            "select",
            "id, user_id, cv_name, cv_type, cv_directory, cv_context, create_date, update_date",
            "from resume",
            "where user_id = #{userId,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
            @Result(column="cv_name", property="cvName", jdbcType=JdbcType.VARCHAR),
            @Result(column="cv_type", property="cvType", jdbcType=JdbcType.INTEGER),
            @Result(column="cv_directory", property="cvDirectory", jdbcType=JdbcType.VARCHAR),
            @Result(column="cv_context", property="cvContext", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_date", property="createDate", jdbcType=JdbcType.VARCHAR),
            @Result(column="update_date", property="updateDate", jdbcType=JdbcType.VARCHAR)
    })
    List<Resume> selectAllByUserId(Integer userId);

    @Select({
            "select",
            "id, user_id, cv_name, cv_type, cv_directory, cv_context, create_date, update_date",
            "from resume",
            "where user_id = #{userId,jdbcType=INTEGER}",
            "LIMIT #{offset}, #{pageSize}"
    })
    @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER),
            @Result(column="cv_name", property="cvName", jdbcType=JdbcType.VARCHAR),
            @Result(column="cv_type", property="cvType", jdbcType=JdbcType.INTEGER),
            @Result(column="cv_directory", property="cvDirectory", jdbcType=JdbcType.VARCHAR),
            @Result(column="cv_context", property="cvContext", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_date", property="createDate", jdbcType=JdbcType.VARCHAR),
            @Result(column="update_date", property="updateDate", jdbcType=JdbcType.VARCHAR)
    })
    List<Resume> selectAllByUserIdPages(@Param("offset") int offset, @Param("pageSize") int pageSize, Integer userId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table resume
     *
     * @mbg.generated Sat Jun 08 12:45:10 PDT 2024
     */
    @Update({
        "update resume",
        "set user_id = #{userId,jdbcType=INTEGER},",
          "cv_name = #{cvName,jdbcType=VARCHAR},",
          "cv_type = #{cvType,jdbcType=INTEGER},",
          "cv_directory = #{cvDirectory,jdbcType=VARCHAR},",
          "cv_context = #{cvContext,jdbcType=VARCHAR},",
          "create_date = #{createDate,jdbcType=VARCHAR},",
          "update_date = #{updateDate,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Resume record);
}